{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","react_default","a","createElement","className","onClick","value","Board","render","_this","renderSquare","i","components_Square","squares","Component","Game","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSquare","history","state","length","square","slice","calculateWinner","xIsNext","setState","concat","lines","_lines$i","slicedToArray","b","c","reset","Array","fill","undo","status","current","winner","components_Board","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3671ae50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './square.css';\r\n\r\nconst Square = (props) => (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n)\r\n\r\nexport default Square","import React, { Component } from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component{\r\n    render = () => {\r\n        return (     \r\n        <div>\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n            <br/>\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n            <br />\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n        </div>\r\n        )\r\n    }\r\n\r\n    renderSquare = (i) => (\r\n        <Square \r\n            value= {this.props.squares[i]} \r\n            onClick = {() => this.props.onClick(i)}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Board","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport './game.css';\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            history: [{\r\n                square: Array(9).fill(null)\r\n            }],\r\n            xIsNext: true\r\n        }\r\n    }\r\n    handleSquare = (i) => {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const squares = current.square.slice();\r\n        if (this.calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history : history.concat([{\r\n                square : squares\r\n            }]),\r\n            xIsNext: !this.state.xIsNext\r\n        })\r\n    }\r\n    calculateWinner = (squares) => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ]\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    reset = () => {\r\n        const history = [{\r\n            square : Array(9).fill(null)\r\n        }]\r\n        this.setState({\r\n            history : history,\r\n            xIsNext: true\r\n        })\r\n    }\r\n    undo = () => {\r\n        const history = this.state.history;\r\n        if(history.length === 1) return;\r\n        const current = history[history.length - 2];\r\n        const squares = current.square.slice();\r\n        this.setState({\r\n            history : history.concat([{\r\n                square : squares\r\n            }]),\r\n            xIsNext: !this.state.xIsNext\r\n        })\r\n    }\r\n    render = () => {\r\n        const history = this.state.history;\r\n        const current = history[history.length - 1];\r\n        const winner = this.calculateWinner(current.square);\r\n        let status\r\n        if (winner) {\r\n            status = 'Winner : ' + winner;\r\n        } else {\r\n            status = 'Next Turn : ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n        return (\r\n            <div>\r\n                <button \r\n                    className = \"button\"\r\n                    onClick = {() => this.reset()}\r\n                > Reset\r\n                </button>\r\n                <button \r\n                    className = \"button\"\r\n                    onClick = {() => this.undo()}\r\n                > Undo\r\n                </button>\r\n                <h1>{status}</h1> \r\n                <Board \r\n                    squares={current.square} \r\n                    onClick={(i) => this.handleSquare(i)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}